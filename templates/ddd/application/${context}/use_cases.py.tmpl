from __future__ import annotations
from dataclasses import dataclass
from uuid import UUID
from ...core.errors import NotFoundError
from ...domain.${context}.entities import ${ContextCap}
from ...domain.ports.uow import UnitOfWork

@dataclass
class Create${ContextCap}:
    uow: UnitOfWork
    async def __call__(self, name: str, email: str) -> ${ContextCap}:
        async with self.uow as uow:
            if await uow.${context}s.by_email(email):
                raise ValueError("Email já utilizado")
            c = ${ContextCap}.new(name=name, email=email)
            await uow.${context}s.add(c)
            return c

@dataclass
class Get${ContextCap}:
    uow: UnitOfWork
    async def __call__(self, id: UUID) -> ${ContextCap}:
        async with self.uow as uow:
            c = await uow.${context}s.get(id)
            if not c:
                raise NotFoundError("Registro não encontrado")
            return c

@dataclass
class List${ContextCap}s:
    uow: UnitOfWork
    async def __call__(self, limit: int = 50, offset: int = 0):
        async with self.uow as uow:
            return [*await uow.${context}s.list(limit=limit, offset=offset)]