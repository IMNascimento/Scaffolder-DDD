from __future__ import annotations
from contextlib import contextmanager
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, DeclarativeBase
from ${module_name}.infrastructure.shared.settings import settings

db_url = (
    f"sqlite:///{settings.DB_NAME}"
    if settings.DB_NAME not in (":memory:", None)
    else "sqlite:///:memory:"
)

engine = create_engine(db_url, connect_args={"check_same_thread": False})

class Base(DeclarativeBase):
    pass

SessionLocal = sessionmaker(bind=engine, autoflush=False, autocommit=False)

def startup():
    _ = engine.connect()
    _.close()

def shutdown():
    engine.dispose()

@contextmanager
def session_scope():
    session = SessionLocal()
    try:
        yield session
        session.commit()
    except Exception:
        session.rollback()
        raise
    finally:
        session.close()
