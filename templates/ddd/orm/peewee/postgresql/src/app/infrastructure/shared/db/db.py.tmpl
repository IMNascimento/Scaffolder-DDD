from __future__ import annotations
from contextlib import contextmanager
from playhouse.pool import PooledPostgresqlDatabase
from peewee import Model
from ${module_name}.infrastructure.shared.settings import settings

_db = PooledPostgresqlDatabase(
    settings.DB_NAME,
    user=settings.DB_USER,
    password=settings.DB_PASSWORD,
    host=settings.DB_HOST,
    port=settings.DB_PORT or 5432,
    max_connections=settings.DB_POOL_MAX,
    stale_timeout=settings.DB_TIMEOUT,
)

class BaseModel(Model):
    class Meta:
        database = _db

def startup():
    if _db.is_closed():
        _db.connect(reuse_if_open=True)

def shutdown():
    if not _db.is_closed():
        _db.close()

@contextmanager
def connection_scope():
    if _db.is_closed():
        _db.connect(reuse_if_open=True)
    try:
        yield _db
    finally:
        if not _db.is_closed():
            _db.close()
