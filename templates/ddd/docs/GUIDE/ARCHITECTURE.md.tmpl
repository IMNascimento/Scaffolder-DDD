# Arquitetura DDD (Domain-Driven Design)

Domain-Driven Design coloca o domínio do negócio no centro do design.

## Estrutura
```
app/
├── domain/          # Entidades, Value Objects, Repositories (interfaces)
├── application/     # Use Cases, DTOs
├── infrastructure/  # Implementação de repositórios, ORM
└── presentation/    # Controllers, Schemas Pydantic
```

## Exemplo Completo

### Domain Entity
```python
# app/domain/entities/user.py
from dataclasses import dataclass

@dataclass
class User:
    id: int | None
    email: str
    name: str
    is_active: bool = True
    
    def deactivate(self):
        self.is_active = False
```

### Repository Interface
```python
# app/domain/repositories/user_repository.py
from abc import ABC, abstractmethod

class UserRepository(ABC):
    @abstractmethod
    async def save(self, user: User) -> User:
        pass
```

### Use Case
```python
# app/application/use_cases/create_user.py
class CreateUserUseCase:
    def __init__(self, repo: UserRepository):
        self.repo = repo
    
    async def execute(self, email: str, name: str) -> User:
        user = User(None, email, name)
        return await self.repo.save(user)
```

Consulte a documentação completa para mais detalhes.
