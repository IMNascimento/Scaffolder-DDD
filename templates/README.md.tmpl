# ${project_name}

Arquitetura: **DDD + Hexagonal (Ports & Adapters)**

Camadas:
- **domain/**: entidades e portas (sem deps externas)
- **application/**: casos de uso; depende só de domain
- **infrastructure/**: adapters (DB etc.) implementam ports
- **api/**: `routers/` + `schemas/`; controladores finos

## Bibliotecas instaladas (latest, sem pins)
- fastapi, uvicorn[standard], pydantic, pydantic-settings
- sqlalchemy, asyncpg, **alembic** (inicializado via `alembic init -t async`)
- structlog, pytest, pytest-asyncio, pytest-cov, ruff, mypy, pre-commit

> As versões são geradas via `pip freeze` após a instalação.

## Dev (sem Docker)
```bash
cp .env.example .env
python -m venv .venv
source .venv/bin/activate   # Windows: .venv\\Scripts\\activate
pip install -U -r requirements.bootstrap.txt
pip freeze > requirements.txt
alembic init -t async alembic   # se não foi criado pelo gerador
alembic upgrade head
./scripts/dev.sh
```

## Docker
```bash
docker compose up -d --build
```

## Testes
```bash
pytest -q --asyncio-mode=auto
```