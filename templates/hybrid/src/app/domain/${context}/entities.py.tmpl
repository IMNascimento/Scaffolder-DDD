from dataclasses import dataclass
from uuid import UUID, uuid4

@dataclass(slots=True)
class ${ContextCap}:
    id: UUID
    name: str
    email: str
    is_active: bool = True
    
    @staticmethod
    def new(name: str, email: str) -> "${ContextCap}":
        if not name or not name.strip():
            raise ValueError("Nome não pode ser vazio")
        if not ${ContextCap}._is_valid_email(email):
            raise ValueError("Email inválido")
        
        return ${ContextCap}(
            id=uuid4(),
            name=name.strip(),
            email=email.lower(),
            is_active=True
        )
    
    def deactivate(self) -> None:
        if not self.is_active:
            raise ValueError("${ContextCap} já está inativo")
        self.is_active = False
    
    def update_email(self, new_email: str) -> None:
        if not self._is_valid_email(new_email):
            raise ValueError("Email inválido")
        self.email = new_email.lower()
    
    @staticmethod
    def _is_valid_email(email: str) -> bool:
        return "@" in email and "." in email.split("@")[1]
