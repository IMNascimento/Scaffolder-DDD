from __future__ import annotations
from typing import Optional

from sqlalchemy.ext.asyncio import AsyncSession

from ${module_name}.adapters.shared.db import session_scope
# --- imports do domínio (ports/repos) gerados pelo scaffolder:
${domain_repo_imports}

# --- imports dos repositórios concretos (SQLAlchemy) por context:
${adapter_repo_imports}

class SAUnitOfWork:
${uow_properties}    # propriedades tipadas, uma por context (ex: customers: CustomerRepository)

    def __init__(self) -> None:
        self._session_cm = session_scope()  # definido por DB em adapters.shared.db
        self._session: Optional[AsyncSession] = None
${uow_cache_fields}    # caches (ex: _customers: CustomerRepository | None = None)

    async def __enter__(self) -> "SAUnitOfWork":
        self._session = await self._session_cm.__enter__()
${uow_repo_inits}        # ex: self._customers = SACustomerRepository(self._session)
        return self

    async def __exit__(self, exc_type, exc, tb) -> None:
        try:
            if exc_type:
                await self.rollback()
            else:
                await self.commit()
        finally:
            await self._session_cm.__exit__(exc_type, exc, tb)
            self._session = None
${uow_cache_resets}            # zera caches

${uow_properties_getters}    # getters (assert dentro de with)

    async def commit(self) -> None:
        if self._session:
            await self._session.commit()

    async def rollback(self) -> None:
        if self._session:
            await self._session.rollback()
