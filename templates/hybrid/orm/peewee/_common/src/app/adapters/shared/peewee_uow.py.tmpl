from __future__ import annotations
from typing import Optional
from peewee_async import Manager

from ${module_name}.${shared_pkg}.shared.db import session_scope
# --- imports do domínio (ports/repos) gerados pelo scaffolder:
${domain_repo_imports}

# --- imports dos repositórios concretos (Peewee) por context:
${adapter_repo_imports}

class PWUnitOfWork:
${uow_properties}

    def __init__(self) -> None:
        self._mgr_cm = session_scope()  # retorna Manager (definido por DB)
        self._mgr: Optional[Manager] = None
${uow_cache_fields}

    async def __enter__(self) -> "PWUnitOfWork":
        self._mgr = await self._mgr_cm.__enter__()
${uow_repo_inits}
        return self

    async def __exit__(self, exc_type, exc, tb) -> None:
        try:
            # commit/rollback explícitos devem acontecer quando você abrir transações:
            # async with self._mgr.transaction(): ...
            # Aqui mantemos assinatura, mas são no-ops.
            if exc_type:
                await self.rollback()
            else:
                await self.commit()
        finally:
            await self._mgr_cm.__exit__(exc_type, exc, tb)
            self._mgr = None
${uow_cache_resets}

${uow_properties_getters}

    async def commit(self) -> None:
        return None

    async def rollback(self) -> None:
        return None
