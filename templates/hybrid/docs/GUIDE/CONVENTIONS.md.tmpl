# Convenções de Código

## Padrões Gerais

### Nomenclatura
- **Variáveis e Funções**: snake_case
  ```python
  user_name = "João"
  def calculate_total_price():
      pass
  ```

- **Classes**: PascalCase
  ```python
  class UserRepository:
      pass
  ```

- **Constantes**: UPPER_SNAKE_CASE
  ```python
  MAX_RETRY_ATTEMPTS = 3
  DATABASE_URL = "postgresql://..."
  ```

### Organização de Imports
```python
# 1. Biblioteca padrão
import os
from typing import List, Optional

# 2. Bibliotecas de terceiros
from fastapi import FastAPI, Depends
from sqlalchemy import Column, String

# 3. Imports locais
from app.domain.entities import User
```

### Type Hints
✅ **SEMPRE use type hints**
```python
def get_user_by_id(user_id: int) -> Optional[User]:
    pass
```

### Docstrings (Google Style)
```python
def calculate_discount(price: float, percentage: float) -> float:
    """Calcula o desconto sobre um preço.

    Args:
        price: Preço original do produto
        percentage: Percentual de desconto (0-100)

    Returns:
        Preço com desconto aplicado

    Raises:
        ValueError: Se o percentual for inválido
    """
    if not 0 <= percentage <= 100:
        raise ValueError("Percentual deve estar entre 0 e 100")
    return price * (1 - percentage / 100)
```

## Boas Práticas FastAPI

### Estrutura de Rotas
```python
from fastapi import APIRouter, Depends, status

router = APIRouter(prefix="/users", tags=["users"])

@router.get("/", response_model=List[UserResponse])
async def list_users(skip: int = 0, limit: int = 100):
    """Lista todos os usuários com paginação."""
    return await user_service.list_users(skip, limit)
```

### Models Pydantic
```python
from pydantic import BaseModel, Field, EmailStr

class UserCreate(BaseModel):
    email: EmailStr
    name: str = Field(..., min_length=2, max_length=100)
    
    class Config:
        from_attributes = True
```

Para mais detalhes, consulte os guias específicos de cada arquitetura.
